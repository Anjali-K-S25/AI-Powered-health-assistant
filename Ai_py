{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN1CZ0cEGNz/BOjsOJNs3vd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Anjali-K-S25/AI-Powered-health-assistant/blob/main/Ai_py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CnFjazgDLJGJ",
        "collapsed": true
      },
      "outputs": [],
      "source": [
        "pip install streamlit transformers torch accelerate bitsandbytes"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import torch\n",
        "from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig\n",
        "\n",
        "# Sidebar: Model loading status\n",
        "st.sidebar.write(\"‚è≥ Loading BioMistral-7B model in 8-bit mode...\")\n",
        "\n",
        "# Configure 8-bit quantization\n",
        "bnb_config = BitsAndBytesConfig(load_in_8bit=True)\n",
        "\n",
        "@st.cache_resource\n",
        "def load_model():\n",
        "    \"\"\"Loads the tokenizer and model in 8-bit mode.\"\"\"\n",
        "    try:\n",
        "        tokenizer = AutoTokenizer.from_pretrained(\"BioMistral/BioMistral-7B\")\n",
        "        model = AutoModelForCausalLM.from_pretrained(\n",
        "            \"BioMistral/BioMistral-7B\",\n",
        "            quantization_config=bnb_config,\n",
        "            device_map=\"auto\"\n",
        "        )\n",
        "        return tokenizer, model\n",
        "    except Exception as e:\n",
        "        st.error(f\"‚ö†Ô∏è Model loading failed: {e}\")\n",
        "        return None, None\n",
        "\n",
        "# Load model\n",
        "tokenizer, model = load_model()\n",
        "\n",
        "if tokenizer is None or model is None:\n",
        "    st.stop()  # Stop execution if model fails to load\n",
        "\n",
        "st.sidebar.success(\"‚úÖ Model loaded successfully!\")\n",
        "\n",
        "# Chatbot function\n",
        "def chat_with_meditron(user_query):\n",
        "    \"\"\"Generates a medical response using BioMistral-7B.\"\"\"\n",
        "    if not user_query.strip():\n",
        "        return \"‚ö†Ô∏è Please enter a valid medical question.\"\n",
        "\n",
        "    try:\n",
        "        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "        inputs = tokenizer(user_query, return_tensors=\"pt\").to(device)\n",
        "\n",
        "        output = model.generate(\n",
        "            **inputs,\n",
        "            max_new_tokens=200,\n",
        "            temperature=0.5,\n",
        "            top_p=0.8,\n",
        "            repetition_penalty=1.2\n",
        "        )\n",
        "\n",
        "        response = tokenizer.decode(output[0], skip_special_tokens=True)\n",
        "\n",
        "        if \"I'm sorry\" in response or len(response.split()) < 5:\n",
        "            return \"‚ö†Ô∏è I couldn't find a relevant medical answer. Please rephrase your question.\"\n",
        "\n",
        "        return response\n",
        "\n",
        "    except Exception as e:\n",
        "        return f\"‚ö†Ô∏è Error: {str(e)}\"\n",
        "\n",
        "# Streamlit UI\n",
        "st.title(\"üè• AI Health Assistant\")\n",
        "st.write(\"Ask any medical-related question and get AI-generated insights.\")\n",
        "\n",
        "# User Input\n",
        "user_input = st.text_input(\"Enter your medical query:\")\n",
        "if st.button(\"üîç Get Answer\"):\n",
        "    with st.spinner(\"Processing...\"):\n",
        "        response = chat_with_meditron(user_input)\n",
        "    st.text_area(\"Chatbot Response:\", response, height=150)\n",
        "\n",
        "# About Section\n",
        "with st.expander(\"‚ÑπÔ∏è About\"):\n",
        "    st.write(\n",
        "        \"- üè• This AI chatbot answers **medical-related questions**.\\n\"\n",
        "        \"- ‚ö†Ô∏è **Not a substitute for professional medical advice**.\\n\"\n",
        "        \"- üöÄ Built using **Streamlit** and **Hugging Face Models**.\"\n",
        "    )\n",
        "\n",
        "# FAQ Section\n",
        "with st.expander(\"‚ùì FAQ\"):\n",
        "    faq_list = [\n",
        "        (\"Can I use this for medical diagnosis?\", \"‚ùå No, this is for **informational purposes only**. Always consult a healthcare professional.\"),\n",
        "        (\"How accurate are the responses?\", \"üìä AI provides answers based on trained medical data, but cross-check with reliable sources.\"),\n",
        "        (\"Is my data safe?\", \"üîê Yes, your input is **not stored**.\"),\n",
        "        (\"What types of medical questions can I ask?\", \"üí° You can ask about **symptoms, diseases, medications, treatments**.\"),\n",
        "        (\"Does this AI prescribe medicine?\", \"‚ùå No, always consult a doctor.\"),\n",
        "        (\"Can it provide emergency medical advice?\", \"‚ö†Ô∏è No, call **emergency services** for urgent cases.\"),\n",
        "        (\"Is this suitable for mental health support?\", \"üß† It provides **basic guidance**, but not a replacement for therapy.\"),\n",
        "        (\"Can I trust the medical advice given?\", \"üè• Always verify with professionals like **WHO or CDC**.\"),\n",
        "        (\"How frequently is the AI updated?\", \"üîÑ Periodic updates based on **medical research** and **AI improvements**.\"),\n",
        "        (\"Can I use this chatbot for education?\", \"üìö Yes! Great for **learning medical topics**, but not for clinical use.\"),\n",
        "    ]\n",
        "\n",
        "    for question, answer in faq_list:\n",
        "        with st.expander(f\"**{question}**\"):\n",
        "            st.write(answer)\n",
        "\n",
        "# Run the app with `streamlit run app.py`"
      ],
      "metadata": {
        "id": "s6CyAoA2OB4r"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}